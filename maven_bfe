#!groovy
def PROJECT_VERSION ='0.0.0'
def ARTIFACT_NAME =''
def SERVICE_NAME=''
def ENVIRONMENT = ""

pipeline
{
    agent 
    {
        label 'swarm_worker'
    }
    options 
    { 
        office365ConnectorWebhooks([[name: 'nprd_bfe_jenkins', notifyFailure: true, notifySuccess: true, startNotification: true, url: 'https://outlook.office.com/webhook/718fa5e8-4c6b-4872-94c4-99445c122eef@15ccb6d1-d335-4996-b6f9-7b6925f08121/JenkinsCI/a1d7753c2a2e41b89eaf15c117858c78/f224158a-2841-44c5-a8d2-de7c9f0c9bd2']])
        timestamps ()
        disableConcurrentBuilds()
        ansiColor('xterm')
        authorizationMatrix inheritanceStrategy: inheritingGlobal(), 
        permissions: [
        'hudson.model.Item.Build:BFE*bfe_dev_team', 
        'hudson.model.Item.Cancel:BFE*bfe_dev_team', 
        'hudson.model.Item.Read:BFE*bfe_dev_team', 
        'hudson.model.Item.Read:BFE*bfe_support_team'
        ] 
    }
    environment 
    {
        GITHUB_ACCESS = credentials ('github_npa_pat')
        GEHC_ARTIFACTORY = credentials ('artifactory_npa_pat')
        SONAR_ACCESS = credentials ('sonar_npa_pat')
        COVERITY_ACCESS = credentials ('coverity_npa_pat')
        COVERITY_URL = "http://coverity.cloud.health.ge.com"
        DOCKER_REGISTRY = "hc-us-east-aws-artifactory.cloud.health.ge.com"
        DOCKER_REPO ="docker-bfe-preprod"
        //REPO_NAME="gebfe-finance-view"
        HOME = "." 
        SRC="${WORKSPACE}/JOB_BASE_NAME/settings.xml"
        DEST="${WORKSPACE}/${JOB_BASE_NAME}/${APP_BRANCH}"  
    }
  
    parameters
    {
        string(name: 'APP_BRANCH', defaultValue: 'dev', description: 'which child branch of Dev should I build')
        choice(name: 'DEV_PROMOTE', choices:'dev-rebase-build\nverify\ntrue\nsprint', description: 'Merge with develop and deploy to dev environment NOTE: if dev-rebase-build is choosen then APP_BRANCH is ignored')
        string(name: 'REPO_NAME', defaultValue: 'enter reponame ', description: 'enter repo name like "gebfe-finace-view')
    }
  
    stages
    {
	    stage("cleanup_before_job") {
            steps {
                
		        sh 'docker system prune -af'
		        
                //cleanWs()
            }
        }
        stage('Build Info Set')
        {
            steps
            {
                script
                {
                    def triggeredByUser =  "${currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause).getUserName()}"
                    currentBuild.displayName = "${BUILD_DISPLAY_NAME} - ${APP_BRANCH} - ${triggeredByUser}"
                } //script
            } // steps
        } //stage - Build Info Set
	  
        stage('Pull_Request_Status') 
        {
            when {  expression { params.DEV_PROMOTE ==~ /(true|sprint)/ }  }
            steps
            {
                sh  """
                        export PATH=/mnt/efs/devops-stack:\$PATH
                        pull_request=\$(curl -H 'Content-Type: application/json' -u ${GITHUB_ACCESS_USR}:${GITHUB_ACCESS_PSW} https://github.build.ge.com/api/v3/repos/BFE/${REPO_NAME}/pulls?state=open | jq '.[] | select(.head.ref == "${APP_BRANCH}" ) | .url' | cut -d'"' -f2)
                        echo \${pull_request}
        
                        pull_request_status=\$(curl -H 'Content-Type: application/json' -u ${GITHUB_ACCESS_USR}:${GITHUB_ACCESS_PSW} \${pull_request}/reviews | jq '.[] | select( .state == "APPROVED") | .state ')
                        echo \${pull_request_status}
                        case \${pull_request_status} in 
                        *APPROVED* )
                        echo " continue with promotion activity"
                        ;;
                        * )
                        echo "Pull Request is not yet Approved  Aborting the Promote job"
                        exit 1
                        ;;
                        esac
                    """
            } //steps
        }  //stage('Pull_Request_Status') 
	  
        stage('Build and Test')
        {
            agent 
            {
                docker 
                {
                    image 'hc-us-east-aws-artifactory.cloud.health.ge.com/docker-bfe-all/maven:3.5'
                    reuseNode true
                    args  '-v /tmp:/tmp -v /mnt/efs/coverity:/mnt/efs/coverity --network docker-gateway'
		            // --network docker-gateway
                    registryUrl 'https://hc-us-east-aws-artifactory.cloud.health.ge.com'
                    registryCredentialsId 'artifactory_npa_pat'
                }
            }

            stages 
            { 
                stage('code_checkout_verify')
                { 
		when {  expression { params.DEV_PROMOTE ==~ /(verify)/ }  }
                    steps
                    {
                        dir("${APP_BRANCH}"){
                            //git branch: "dev", credentialsId: 'github_npa_pat', url: "https://github.build.ge.com/BFE/${REPO_NAME}.git"
			    git branch: "${APP_BRANCH}", credentialsId: 'github_npa_pat', url: "https://github.build.ge.com/BFE/${REPO_NAME}.git"
                        }
                    } //steps
                } // stage
		    
		    stage('code_checkout_sprint')
                { 
		when {  expression { params.DEV_PROMOTE ==~ /(sprint)/ }  }
                    steps
                    {
                        dir("${APP_BRANCH}"){
                            
			    git branch: "sprint", credentialsId: 'github_npa_pat', url: "https://github.build.ge.com/BFE/${REPO_NAME}.git"
                        }
                    } //steps
                } // stage
		    
		stage('code_checkout')
                { 
		when {  expression { params.DEV_PROMOTE ==~ /(true)/ }  }
                    steps
                    {
                        dir("${APP_BRANCH}"){
                            
			    git branch: "dev", credentialsId: 'github_npa_pat', url: "https://github.build.ge.com/BFE/${REPO_NAME}.git"
                        }
                    } //steps
                } // stage

                stage('merge check and update version')
                {	
                    when 
                    { 
                        expression { params.DEV_PROMOTE ==~ /(true)/ }
                    }
                    steps 
			{
                       
                            sh  '''
                                    #!/bin/bash
				    pwd
                                    cd ${APP_BRANCH}
				    cp ${WORKSPACE}/gitflow_av/settings.xml .
                                    currentVersion=`mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' -Dmaven.repo.local=/tmp/mvn_repository/${REPO_NAME} --non-recursive exec:exec -f pom.xml -s settings.xml`
                                    echo " current version : $currentVersion "

                                    major=`echo $currentVersion | cut -d "." -f1`
                                    minor=`echo $currentVersion | cut -d "." -f2`
                                    micro=`echo $currentVersion | cut -d "." -f3`

                                    echo -n "https://${GITHUB_ACCESS}@github.build.ge.com/BFE/${REPO_NAME}.git" > .git-credentials 

                                    git config user.email "Service.BFE_GIT_SERVICE_ACCNT@ge.com" # Functional Account email to be updated
                                    git config --global user.name "BFE_GIT_SERVICE_ACCNT, Service" # Functional Account user to be updated
                                    git config --global credential.helper "store --file .git-credentials"

                                    case "${APP_BRANCH}" in 

                                    *major_*)
                                        echo " Branch is Major "
                                        git merge --no-commit  --no-ff -v origin/${APP_BRANCH}
                                        major=$((major+1)); minor=0; micro=0
                                        releaseVersion=${major}.${minor}.${micro}
                                        mvn versions:set -DnewVersion=$releaseVersion -s settings.xml -Dmaven.repo.local=/tmp/mvn_repository/${REPO_NAME}
                                        git add pom.xml
                                        ;;
                                    *minor_*)
                                        echo " Branch is Minor "
                                        git merge --no-commit  --no-ff -v origin/${APP_BRANCH}
                                        minor=$((minor+1)); micro=0
                                        releaseVersion=${major}.${minor}.${micro}
                                        mvn versions:set -DnewVersion=$releaseVersion -s settings.xml -Dmaven.repo.local=/tmp/mvn_repository/${REPO_NAME}
                                        git add pom.xml
                                        ;;
				   *defect_*)
                                        echo " Branch is Micro Feature "
                                        git merge --no-commit  --no-ff -v origin/${APP_BRANCH}
                                        micro=$((micro+1))
                                        releaseVersion=${major}.${minor}.${micro}
                                        mvn versions:set -DnewVersion=$releaseVersion -s settings.xml -Dmaven.repo.local=/tmp/mvn_repository/${REPO_NAME}
                                        git add pom.xml
                                        ;;
                                    dev)
                                        echo "Branch is dev branch:  merge is not needed, just rebuild from dev and publish to Artifactory " 
                                        ;;
                                    *)
                                        echo " Branch is neither Dev / major / minor  pls contact team leads "
                                        exit 1
                                        ;;
                                    esac
                                '''
                        }//steps
                    
                }// stage('merge check and update version')
        
                stage('build, sonar and test')
                {
                    steps
                    {
                        dir ("${APP_BRANCH}") 
                        {
                            script {
                                PROJECT_VERSION = readMavenPom().getVersion() 
                                ARTIFACT_NAME = readMavenPom().getArtifactId()
                            }
                            echo (" Artifact Name = ${ARTIFACT_NAME} Project Version = ${PROJECT_VERSION} " )
                        }
                        sh  """
                                #!/bin/bash
				cd ${APP_BRANCH}
				cp ${WORKSPACE}/gitflow_av/settings.xml .
				pwd
                                case "${DEV_PROMOTE}" in
                                    true)
                                        #sonar:sonar -Dsonar.branch=dev
                                        mvn clean install -DskipTests -s settings.xml -Dmaven.repo.local=/tmp/mvn_repository/${REPO_NAME}
                                        ;;
                                    sprint)
                                        mvn clean install -DskipTests -s settings.xml -Dmaven.repo.local=/tmp/mvn_repository/${REPO_NAME}
                                        ;;
                                    verify)
                                        #sonar:sonar -Dsonar.branch=\${APP_BRANCH}
                                        mvn clean install -DskipTests -s settings.xml  -Dmaven.repo.local=/tmp/mvn_repository/${REPO_NAME}
                                        ;;
                                    dev-rebase-build)
                                        mvn clean install -DskipTests 
					#-s settings.xml -Dmaven.repo.local=/tmp/mvn_repository/${REPO_NAME}
                                        ;;
                                esac
                            """
                    } // steps
                } //stage('build, sonar and test')
            } // stages 
        } // stage ( build and Test ) 
  
        stage('docker_publish')
        {
            steps 
            {
                sh  """
                        #!/bin/bash
                        cd ${APP_BRANCH}
                        docker --config ~/.${DOCKER_REPO} login --username ${GEHC_ARTIFACTORY_USR} --password ${GEHC_ARTIFACTORY_PSW} ${DOCKER_REGISTRY}
             
                        case "${DEV_PROMOTE}" in 
                            true)
                                docker build . -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${ARTIFACT_NAME}:${PROJECT_VERSION}-${APP_BRANCH}
                                docker --config ~/.${DOCKER_REPO} push ${DOCKER_REGISTRY}/${DOCKER_REPO}/${ARTIFACT_NAME}:${PROJECT_VERSION}-${APP_BRANCH}
                                ;;
                            verify)
                                docker build . -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${ARTIFACT_NAME}:${APP_BRANCH}
                                docker --config ~/.${DOCKER_REPO} push ${DOCKER_REGISTRY}/${DOCKER_REPO}/${ARTIFACT_NAME}:${APP_BRANCH}
                                ;;
                            dev-rebase-build)
                                docker build . -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${ARTIFACT_NAME}:dev-rebuild
                                docker --config ~/.${DOCKER_REPO} push ${DOCKER_REGISTRY}/${DOCKER_REPO}/${ARTIFACT_NAME}:dev-rebuild
                                ;;
                            sprint)
			        git merge --no-commit  --no-ff -v origin/${APP_BRANCH}
                                docker build . -t ${DOCKER_REGISTRY}/${DOCKER_REPO}/${ARTIFACT_NAME}:sprint-${APP_BRANCH}
                                docker --config ~/.${DOCKER_REPO} push ${DOCKER_REGISTRY}/${DOCKER_REPO}/${ARTIFACT_NAME}:sprint-${APP_BRANCH}
                                ;;
                        esac
            
                    """
            } //steps       
        } // stage('docker_publish')   
	    stage('Merge and promote')
        {
            when { 
		        expression { params.DEV_PROMOTE ==~ /(true|verify|sprint|dev-rebase-build)/ }
	        }
            steps 
            {
		        dir ("${APP_BRANCH}") 
                {
                    script {
                        PROJECT_VERSION = readMavenPom().getVersion() 
                        ARTIFACT_NAME = readMavenPom().getArtifactId()
                    }
                    echo (" Artifact Name = ${ARTIFACT_NAME} Project Version = ${PROJECT_VERSION} " )
                }
                sh  """
	                    #!/bin/bash
                        cd ${APP_BRANCH}
                        case "${DEV_PROMOTE}" in 
                            true)
			        
			      echo -n "https://${GITHUB_ACCESS}@github.build.ge.com/BFE/${REPO_NAME}.git" > .git-credentials 
			      git config user.email "Service.BFE_GIT_SERVICE_ACCNT@ge.com" # Functional Account email to be updated
			      git config --global user.name "BFE_GIT_SERVICE_ACCNT, Service" # Functional Account user to be updated
			      git config --global credential.helper "store --file .git-credentials"
			      git status
              git commit -m "Release Version : ${PROJECT_VERSION} merged ${APP_BRANCH}"
              git log -2
              git tag -a "${PROJECT_VERSION}-${APP_BRANCH}" -m "Release Version : ${PROJECT_VERSION} merged ${APP_BRANCH}"
              git remote get-url origin
              git push --set-upstream origin dev --tags
	      git branch -d ${APP_BRANCH}
                                ;;
                            sprint)
			                    echo -n "https://${GITHUB_ACCESS}@github.build.ge.com/BFE/${REPO_NAME}.git" > .git-credentials 
                                git config user.email "Service.BFE_GIT_SERVICE_ACCNT@ge.com" # Functional Account email to be updated
                                git config --global user.name "BFE_GIT_SERVICE_ACCNT, Service" # Functional Account user to be updated
                                git config --global credential.helper "store --file .git-credentials"
				#git commit -m "Release Version : ${PROJECT_VERSION} merged ${APP_BRANCH}"
		                #git merge --no-commit  --no-ff -v origin/${APP_BRANCH}
                                git log -2
                                #git tag -a "${PROJECT_VERSION}-${APP_BRANCH}" -m "Release Version : ${PROJECT_VERSION} merged ${APP_BRANCH}"
                                #git remote get-url origin
                                #git push --set-upstream origin sprint
	                         git checkout sprint
	                         git merge --no-ff origin/${APP_BRANCH}
	                         git push origin sprint
                                ;;
                        esac
                    """

                dir("gebfe-docker-stack"){
                    git branch: "master", credentialsId: 'github_npa_pat', url: "https://github.build.ge.com/BFE/gebfe-docker-stack.git"
                }

	            sh """
            cd gebfe-docker-stack
	     echo -n "https://${GITHUB_ACCESS}@github.build.ge.com/BFE/gebfe-docker-stack.git" > .git-credentials 
             git config user.email "Service.BFE_GIT_SERVICE_ACCNT@ge.com" # Functional Account email to be updated
             git config --global user.name "BFE_GIT_SERVICE_ACCNT, Service" # Functional Account user to be updated
             git config --global credential.helper "store --file .git-credentials"
             # update smax dev env file
             export
             echo "${ARTIFACT_NAME} ${PROJECT_VERSION} - ${APP_BRANCH}"
	     if  [ "${DEV_PROMOTE}" = "verify" ] ; then
              if  grep "/${ARTIFACT_NAME}:" gebfe-smax-docker-stack.yml ; then
                echo "artifact found in gebfe-smax-docker-stack.yml as such gebfe-smax-dev-version.env will be updated with ${APP_BRANCH} "
              export SERVICE_NAME=`sed 's/[{}]//g' gebfe-smax-docker-stack.yml | grep "/${ARTIFACT_NAME}:" | cut -d':' -f3 | cut -c 2-`
              echo " service name is  : \${SERVICE_NAME}"
	     
              sed -i "s/\${SERVICE_NAME}=.*/\${SERVICE_NAME}=${APP_BRANCH}/g" gebfe-smax-dev-version.env
	      git add gebfe-smax-dev-version.env
                else
                  echo "this artifact is not utilized in gebfe-smax-docker-stack.yml"
                fi
                # update uscan dev env file
	    
              if  grep "/${ARTIFACT_NAME}:" gebfe-uscan-docker-stack.yml ;then
                echo " artifact found in gebfe-uscan-docker-stack.yml as such gebfe-uscan-dev-version.env will be updated with ${APP_BRANCH} "
                export SERVICE_NAME=`sed 's/[{}]//g' gebfe-uscan-docker-stack.yml | grep "/${ARTIFACT_NAME}:" | cut -d":" -f3 | cut -c 2-`
                echo " service name is  : \${SERVICE_NAME}"
             sed -i "s/\${SERVICE_NAME}=.*/\${SERVICE_NAME}=${APP_BRANCH}/g" gebfe-uscan-dev-version.env
	     git add gebfe-uscan-dev-version.env
                else
                  echo "this artifact is  not utilized in gebfe-uscan-docker-stack.yml"
                fi
                fi
		
		if [ "${DEV_PROMOTE}" = "true"  ] ; then
		
		if  grep "/${ARTIFACT_NAME}:" gebfe-smax-docker-stack.yml ; then
                echo "artifact found in gebfe-smax-docker-stack.yml as such gebfe-smax-stage-version.env will be updated with ${PROJECT_VERSION}-${APP_BRANCH} "
              export SERVICE_NAME=`sed 's/[{}]//g' gebfe-smax-docker-stack.yml | grep "/${ARTIFACT_NAME}:" | cut -d':' -f3 | cut -c 2-`
              echo " service name is  : \${SERVICE_NAME}"
	     
              sed -i "s/\${SERVICE_NAME}=.*/\${SERVICE_NAME}=${PROJECT_VERSION}-${APP_BRANCH}/g" gebfe-smax-stage-version.env
	      git add gebfe-smax-stage-version.env
                else
                  echo "this artifact is not utilized in gebfe-smax-docker-stack.yml"
                fi
                # update uscan dev env file
	    
              if  grep "/${ARTIFACT_NAME}:" gebfe-uscan-docker-stack.yml ;then
                echo " artifact found in gebfe-uscan-docker-stack.yml as such gebfe-uscan-stage-version.env will be updated with ${PROJECT_VERSION}-${APP_BRANCH} "
                export SERVICE_NAME=`sed 's/[{}]//g' gebfe-uscan-docker-stack.yml | grep "/${ARTIFACT_NAME}:" | cut -d":" -f3 | cut -c 2-`
                echo " service name is  : \${SERVICE_NAME}"
             sed -i "s/\${SERVICE_NAME}=.*/\${SERVICE_NAME}=${PROJECT_VERSION}-${APP_BRANCH}/g" gebfe-uscan-stage-version.env
	     git add gebfe-uscan-stage-version.env
                else
                  echo "this artifact is  not utilized in gebfe-uscan-docker-stack.yml"
                fi
                fi
		if [ "${DEV_PROMOTE}" = "sprint" ] ; then
		if  grep "/${ARTIFACT_NAME}:" gebfe-smax-docker-stack.yml ; then
                echo "artifact found in gebfe-smax-docker-stack.yml as such gebfe-smax-dev-version.env will be updated with sprint-${APP_BRANCH} "
              export SERVICE_NAME=`sed 's/[{}]//g' gebfe-smax-docker-stack.yml | grep "/${ARTIFACT_NAME}:" | cut -d':' -f3 | cut -c 2-`
              echo " service name is  : \${SERVICE_NAME}"
	     
              sed -i "s/\${SERVICE_NAME}=.*/\${SERVICE_NAME}=sprint-${APP_BRANCH}/g" gebfe-smax-dev-version.env
	      git add gebfe-smax-dev-version.env
                else
                  echo "this artifact is not utilized in gebfe-smax-docker-stack.yml"
                fi
                # update uscan dev env file
	    
              if  grep "/${ARTIFACT_NAME}:" gebfe-uscan-docker-stack.yml ;then
                echo " artifact found in gebfe-uscan-docker-stack.yml as such gebfe-uscan-dev-version.env will be updated with sprint-${APP_BRANCH} "
                export SERVICE_NAME=`sed 's/[{}]//g' gebfe-uscan-docker-stack.yml | grep "/${ARTIFACT_NAME}:" | cut -d":" -f3 | cut -c 2-`
                echo " service name is  : \${SERVICE_NAME}"
             sed -i "s/\${SERVICE_NAME}=.*/\${SERVICE_NAME}=sprint-${APP_BRANCH}/g" gebfe-uscan-dev-version.env
	     git add gebfe-uscan-dev-version.env
                else
                  echo "this artifact is  not utilized in gebfe-uscan-docker-stack.yml"
                fi
                fi
		if [ "${DEV_PROMOTE}" = "dev-rebase-build" ] ; then
		
		if  grep "/${ARTIFACT_NAME}:" gebfe-smax-docker-stack.yml ; then
                echo "artifact found in gebfe-smax-docker-stack.yml as such gebfe-smax-stage-version.env will be updated with ${PROJECT_VERSION}-${APP_BRANCH} "
              export SERVICE_NAME=`sed 's/[{}]//g' gebfe-smax-docker-stack.yml | grep "/${ARTIFACT_NAME}:" | cut -d':' -f3 | cut -c 2-`
              echo " service name is  : \${SERVICE_NAME}"
	     
              sed -i "s/\${SERVICE_NAME}=.*/\${SERVICE_NAME}=dev-rebuild/g" gebfe-smax-stage-version.env
	      git add gebfe-smax-stage-version.env
                else
                  echo "this artifact is not utilized in gebfe-smax-docker-stack.yml"
                fi
                # update uscan dev env file
	    
              if  grep "/${ARTIFACT_NAME}:" gebfe-uscan-docker-stack.yml ;then
                echo " artifact found in gebfe-uscan-docker-stack.yml as such gebfe-uscan-stage-version.env will be updated with ${PROJECT_VERSION}-${APP_BRANCH} "
                export SERVICE_NAME=`sed 's/[{}]//g' gebfe-uscan-docker-stack.yml | grep "/${ARTIFACT_NAME}:" | cut -d":" -f3 | cut -c 2-`
                echo " service name is  : \${SERVICE_NAME}"
             sed -i "s/\${SERVICE_NAME}=.*/\${SERVICE_NAME}=dev-rebuild/g" gebfe-uscan-stage-version.env
	     git add gebfe-uscan-stage-version.env
                else
                  echo "this artifact is  not utilized in gebfe-uscan-docker-stack.yml"
                fi
                fi
		
		
                        if git diff-index --quiet HEAD --; then
                            echo "no version change "
                        else
                            git commit -m " Release Version updated in dev version files"
                            git log -2
                            git push -f origin master
                        fi
                    """
            } //steps
        }//stage('Merge and promote')
	    stage("cleanup") {
            steps {
                
		        sh 'docker system prune -af'
		        
                //cleanWs()
            }
        }
	    
	    /*stage('stack_checkout')
        {
            agent { label 'swarm_manager' }	 
            steps
            {
                dir("${APP_NAME}")
                {
                    git branch: "master", credentialsId: 'github_npa_pat', url: "https://github.build.ge.com/BFE/gebfe-docker-stack.git"
                    sh  '''
                            #!/bin/bash
                            export
                            echo "${APP_NAME}"
                            if  [ "${DEV_PROMOTE}" = "verify" ] ; then
                                ENVIRONMENT="dev"
				 docker --config ~/.${BFE_DOCKER_REPO} login --username ${GEHC_ARTIFACTORY_USR} --password ${GEHC_ARTIFACTORY_PSW} ${DOCKER_REGISTRY}
                            export $(cat gebfe-${APP_NAME}-${ENVIRONMENT}-version.env)
                            export $(cat gebfe-${APP_NAME}-${ENVIRONMENT}-replica.env)
                            export
                            sed -i 's!env-!dev-!g' gebfe-${APP_NAME}-docker-stack.yml
                            grep dev- gebfe-${APP_NAME}-docker-stack.yml
			    docker --config ~/.${BFE_DOCKER_REPO} -D stack deploy -c gebfe-${APP_NAME}-docker-stack.yml ${ENVIRONMENT}-${APP_NAME}
                            elif  [ "${DEV_PROMOTE}" = "sprint" ] ; then
                                ENVIRONMENT="dev"
				docker --config ~/.${BFE_DOCKER_REPO} login --username ${GEHC_ARTIFACTORY_USR} --password ${GEHC_ARTIFACTORY_PSW} ${DOCKER_REGISTRY}
                            export $(cat gebfe-${APP_NAME}-${ENVIRONMENT}-version.env)
                            export $(cat gebfe-${APP_NAME}-${ENVIRONMENT}-replica.env)
                            export
                            sed -i 's!env-!dev-!g' gebfe-${APP_NAME}-docker-stack.yml
                            grep dev- gebfe-${APP_NAME}-docker-stack.yml
			    docker --config ~/.${BFE_DOCKER_REPO} -D stack deploy -c gebfe-${APP_NAME}-docker-stack.yml ${ENVIRONMENT}-${APP_NAME}
                            
                            elif  [ "${DEV_PROMOTE}" = "true" ]  ; then
                                ENVIRONMENT="stage"
				docker --config ~/.${BFE_DOCKER_REPO} login --username ${GEHC_ARTIFACTORY_USR} --password ${GEHC_ARTIFACTORY_PSW} ${DOCKER_REGISTRY}
                            export $(cat gebfe-${APP_NAME}-${ENVIRONMENT}-version.env)
                            export $(cat gebfe-${APP_NAME}-${ENVIRONMENT}-replica.env)
                            export
                            sed -i 's!env-!stg-!g' gebfe-${APP_NAME}-docker-stack.yml
                            grep stg- gebfe-${APP_NAME}-docker-stack.yml
			    docker --config ~/.${BFE_DOCKER_REPO} -D stack deploy -c gebfe-${APP_NAME}-docker-stack.yml ${ENVIRONMENT}-${APP_NAME}
                            fi
                            echo $ENVIRONMENT
                           
                            echo " success"
                        '''
                }
            } //steps 
        } // stage('stack_checkout')
	    //docker --config ~/.${BFE_DOCKER_REPO} -D stack deploy -c gebfe-${APP_NAME}-docker-stack.yml ${ENVIRONMENT}-${APP_NAME}
    
        stage('pre-prod_sanity_check')
        {
            agent { label 'swarm_manager' }
            steps {
                    sh  '''
                            #!/bin/bash
                            if  [ "${DEV_PROMOTE}" = "verify" ] ; then
                                ENVIRONMENT="dev"
				docker stack ps  ${ENVIRONMENT}-${APP_NAME} | grep Running 
				
				
                            elif  [ "${DEV_PROMOTE}" = "sprint" ] ; then
                                ENVIRONMENT="dev"
				docker stack ps  ${ENVIRONMENT}-${APP_NAME} | grep Running 
				
                            docker stack ps  ${ENVIRONMENT}-${APP_NAME} | grep Running
                            elif  [ "${DEV_PROMOTE}" = "true" ]  ; then
                                ENVIRONMENT="stage"
				
				docker stack ps  ${ENVIRONMENT}-${APP_NAME} | grep Running 
                            fi
                            
                            
                        '''
            } //steps 
        } // stage('pre-prod_sanity_check')*/
        
    } //stages 
    post 
    { 
        always 
        { 
            echo 'I will always say Hello again!'
	    cleanWs()
	    
		
        }
    }
}// pipeline
