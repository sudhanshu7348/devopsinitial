apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: deployment-${PROJECT_NAME}
spec:
  template:
    metadata:
      labels:
        app: ${PROJECT_NAME}
    spec:
      containers: 
      - name: container-${PROJECT_NAME}
        image: ${EU_ARTIFACTORY_URL}/${ARTIFACTORY_NAME}/${NAMESPACE}/${PROJECT_NAME}-${NAMESPACE}:${PROJECT_VERSION}
        imagePullPolicy: Always
        resources:
          limits:
            cpu: "${CPU_LIMIT}"
            memory: "${MEMORY_LIMIT}"
          requests:
            cpu: "${CPU}"
            memory: "${MEMORY}"
        env:
        - name: AUTHOR
          value: author
        - name: BUILD_TIME
          value: "${BUILD_TIME}"
        - name: SPRING_PROFILES_ACTIVE
          value: ${APP_ACTIVE_PROFILE}
        - name: ekey
          value: bangalore_podpsn
        - name: server.port
          value: "${APP_PORT}"
        - name: JAVA_OPTS
          value: "${JAVA_OPTS}"
        ports:
        - containerPort: ${APP_PORT}
        livenessProbe:
          httpGet:
            path: ${CONTEXT_PATH}/healthcheck
            port: ${APP_PORT}
          initialDelaySeconds: 45
          periodSeconds: 10
          failureThreshold: 12
        readinessProbe:
          httpGet:
            path: ${CONTEXT_PATH}/healthcheck
            port: ${APP_PORT}
          initialDelaySeconds: 45
          periodSeconds: 10
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: scale-grp-${PROJECT_NAME}
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: deployment-${PROJECT_NAME}
  minReplicas: ${MIN_REPLICAS}
  maxReplicas: ${MAX_REPLICAS}
  targetCPUUtilizationPercentage: ${TGT_CPU_UTIL_PERC}
status:
  currentReplicas: 1
  desiredReplicas: 1
---
apiVersion: v1
kind: Service
metadata:
  name: svc-${PROJECT_NAME}
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: ${APP_PORT}
  selector:
    app: ${PROJECT_NAME}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-${PROJECT_NAME}
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "180"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "180"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "180"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Time_Zone, Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization, OAuth_ResourceOwnerInfo, X-SFDC_REGION, X-Forwarded-For, X-Forwarded-Proto, X-Forwarded-Port, X-Forwarded-Prefix, SFDC-USER-ID, X-SFDC_USER_ID, X-XSRF-TOKEN, XSRF-TOKEN, X-AUTH_PROVIDER, X-UNIQUE_ID"
    nginx.ingress.kubernetes.io/auth-url: "http://svc-${PROJECT_AUTH_SVC}.${NAMESPACE}.svc.cluster.local/oauth2/auth/mygehc?app=${PROJECT_NAME}"
    nginx.ingress.kubernetes.io/auth-response-headers: OAuth_ResourceOwnerInfo, X-SFDC_REGION, X-SSO_ID, X-COUNTRY, X-FIRSTNAME, X-LASTNAME, X-TITLE, X-EMAIL_ID, X-BUSINESS_UNIT, X-COMPANY_NAME, X-LOCATION, X-STATE, SFDC-USER-ID, X-SFDC_USER_ID, X-XSRF-TOKEN, XSRF-TOKEN,X-AUTH_TOKEN_TYPE, X-AUTH_PROVIDER, X-UNIQUE_ID
    nginx.ingress.kubernetes.io/auth-snippet: |
      proxy_set_header application-name ${PROJECT_NAME};
spec:
  rules:
  - host: ${HOST_NAME}
    http:
      paths:
      - path: ${CONTEXT_PATH}
        backend:
          serviceName: svc-${PROJECT_NAME}
          servicePort: 80
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-${PROJECT_NAME}-swagger
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "180"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "180"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "180"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Time_Zone, Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization, OAuth_ResourceOwnerInfo, X-SFDC_REGION, X-Forwarded-For, X-Forwarded-Proto, X-Forwarded-Port, X-Forwarded-Prefix, SFDC-USER-ID, X-SFDC_USER_ID, X-XSRF-TOKEN, XSRF-TOKEN, X-AUTH_PROVIDER, X-UNIQUE_ID"
    nginx.ingress.kubernetes.io/auth-url: "http://svc-${PROJECT_AUTH_SVC}.${NAMESPACE}.svc.cluster.local/oauth2/auth/updateme?app=${PROJECT_NAME}"
    nginx.ingress.kubernetes.io/auth-response-headers: OAuth_ResourceOwnerInfo, X-SFDC_REGION, X-SSO_ID, X-COUNTRY, X-FIRSTNAME, X-LASTNAME, X-TITLE, X-EMAIL_ID, X-BUSINESS_UNIT, X-COMPANY_NAME, X-LOCATION, X-STATE, SFDC-USER-ID, X-SFDC_USER_ID, X-XSRF-TOKEN, XSRF-TOKEN,X-AUTH_TOKEN_TYPE, X-AUTH_PROVIDER, X-UNIQUE_ID
    nginx.ingress.kubernetes.io/auth-snippet: |
      proxy_set_header application-name ${PROJECT_NAME};
spec:
  rules:
  - host: ${SWAGGER_HOST}
    http:
      paths:
      - path: ${CONTEXT_PATH}
        backend:
          serviceName: svc-${PROJECT_NAME}
          servicePort: 80
---
