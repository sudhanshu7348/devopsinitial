pipeline {
    agent {
        label 'dx-nprd'
        }
        environment {
        BRANCH_NAME = "${env.GIT_BRANCH.replaceAll("origin/", "") }"
        
                   }
    stages {
         
        
         stage("Sonar on Master"){
            steps{
                node('master'){
                    script{
                    //cleanWs()
                    git branch: env.BRANCH_NAME, credentialsId: 'fa7cecaf-511f-4bbb-80d4-c63aa9242f3a', url: env.GIT_URL

                    
                    }
                    
                }
            }
         }
        stage("Deployment") {
            steps {
                sh '''
                docker ps 
		    
                fi
                '''
               
            }
        }
        
    }
  post {  
         always {  
             echo "${JOB_NAME} #${BUILD_ID} finished with ${currentBuild.currentResult}"
         }  
         success { 
             echo 'This will run only if successful'  
              emailext (
                subject: "JENKINS: ${JOB_NAME} ${currentBuild.displayName} - ${currentBuild.currentResult}",
                to: "sudhanshu.lavi@ge.com",
                body: getSuccessMessage(),
                attachLog: true
            )
         }  
         failure {  
             echo 'This will run only if Failure' 
             emailext (
                subject: "JENKINS: ${JOB_NAME} ${currentBuild.displayName} - ${currentBuild.currentResult}",
                to: "sudhanshu.lavi@ge.com",
                body: getFailureMessage(),
                attachLog: true
            )

         }  
         unstable {  
             echo 'This will run only if the run was marked as unstable'  
         }  
         changed {  
             echo 'This will run only if the state of the Pipeline has changed'  
             echo 'For example, if the Pipeline was previously failing but is now successful'  
        }  
    }  
}
    def getSuccessMessage(){
    def bodyTemplate = """
            Job name: ${JOB_NAME}
            Buid id: ${BUILD_ID}
            See the attached log or
            check console ${JOB_DISPLAY_URL}/${BUILD_ID}/console
            sonar url ${SONAR_URL}
            """
            return bodyTemplate
}

def getFailureMessage(){
    def bodyTemplate = """
            Job name: ${JOB_NAME}
            Buid id: ${BUILD_ID}
            See the attached log or
            check console ${JOB_DISPLAY_URL}/${BUILD_ID}/console
            sonar url ${SONAR_URL}
            """
            return bodyTemplate
}
